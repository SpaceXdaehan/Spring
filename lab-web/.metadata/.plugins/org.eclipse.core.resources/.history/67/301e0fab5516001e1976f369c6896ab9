/**
 * 댓글 영역 보이기 / 숨기기 토글
 * 댓글 검색, 등록, 수정, 삭제
 */
document.addEventListener('DOMContentLoaded', () => {
    // (1) 부트스트랩 Collapse 객체를 생성. 초기 상태는 화면에 보이지 않는 상태.
    const bsCollapse = new bootstrap.Collapse('div#replyToggleDiv', {toggle: false});
    
    // (2) 토글 버튼을 찾고, 이벤트 리스너를 등록.
    const btnToggleReply = document.querySelector('#btnToggleReply');
    btnToggleReply.addEventListener('click', (e) => {
        bsCollapse.toggle();
        // console.log(e.target.innerText);
        if (e.target.innerText === '보이기') {
            e.target.innerText = '숨기기';
            
            // 댓글 목록 불러오기:
            getRepliesWithPostId();
        } else {
            e.target.innerText = '보이기';
        }
    });
    
    
    // 댓글 삭제 버튼 클릭을 처리하는 이벤트 리스너 등록.
    const deleteReply = (e) => {
       // console.log(e.target);
       
       const result = confirm('정말 삭제하시겠습니까?');
       if (!result) {
           return;
       }
       
       // 삭제할 댓글 아이디
       const id = e.target.getAttribute('data-id');
       
       // Ajax DELETE 방식 요청 주소
       const reqUrl = `/api/reply/${id}`;
       
       // Ajax 요청
       axios
            .delete(reqUrl) // Ajax DELETE 요청을 보냄.
            .then((response) => {
                console.log(response);
                
                // 댓글 목록 새로고침 
                getRepliesWithPostId(postId);
                
            }) // 성공 응답일 때 실행항 콜백 등록.
            .catch((error) => console.lon(error));  // 실패 응답일 때 실행할 콜백 등록.
       
    };
    
    
    const updateReply = (e) => {
        console.log(e.target);
    };
    
    
    // getRepliesWithPostId 에서 사용하는 이벤트
    const makeReplyElement = (data) => {
        // 댓글 개수를 배열(data=배열)의 원소 개수로 업데이트
        document.querySelector('span#replyCount').innerText = data.length;
        
        // 댓글 목록을 삽입할 div 요소를 찾음.
        const replies = document.querySelector('div#replies');
        
        console.log("data="+data);
        // div 안에 작성된 기존 내용은 삭제.
        replies.innerHTML = '';
        
        // div 안에 삽입할 HTML 코드 초기화.
        let htmlStr = '';
        for (let reply of data) {
            console.log(reply);
            htmlStr += `
            <div class="card my-2">
                <div>
                    <span class="d-none">${reply.id}</span>
                    <span class="fw-bold">${reply.writer}</span>               
                </div>
                <textarea id="replyText_${reply.id}">
                    ${reply.replyText}
                </textarea>
                <div>
                    <button class="btnDelete btn btn-outline-danger" data-id="${reply.id}">삭제</button>
                    <button class="btnModify btn btn-outline-primary" data-id="${reply.id}">수정</button>
                </div>
            </div>
            `;
        }
        
        // 작성된 HTML 문자열을 div 요소의 innerHTML로 설정.
        replies.innerHTML = htmlStr;
        
        // 모든 댓글 삭제 버튼들에게 이벤트 리스너를 등록해줌.
        // 같은 엘리먼트를 다 찾아줌 여러개를 찾을 때는 querySelectorAll을 사용
        const btnDeletes = document.querySelectorAll('button.btnDelete');
        for (let btn of btnDeletes) {
            btn.addEventListener('click', deleteReply);
        }
        
        // 모든 댓글 수정 버튼들에게 이벤트 리스너를 등록.
        const btnModifies = document.querySelector('button.btnModify');
        for (let btn of btnModifies) {
            btn.addEventListener('click', updateReply);
        }
    };
    
    
    // 포스트 번호에 달려 있는 댓글 목록을 (Ajax요청으로)가져오는 함수.
    const getRepliesWithPostId = async () => {
        const postId = document.querySelector('input#id').value;    // 포스트 아이디(번호)
        const reqUrl = `/api/reply/all/${postId}`;  // Ajax 요청을 보낼 주소.
        
        // Ajax 요청을 보내고 응답을 기다림.
        try {
            const response = await axios.get(reqUrl);
            // 함수 바디에서 await 함수를 쓰면 async 키워드를 써줘야됨
            // console.log(response);
            makeReplyElement(response.data);
            
        } catch (error) {
            console.log(error);
        }
        
    };
    
    
    // 댓글 등록 버튼을 찾고 이벤트 리스너를 등록.
    const btnReplyCreate = document.querySelector('button#btnReplyCreate');
    btnReplyCreate.addEventListener('click', () => {
        // 댓글을 등록하기 위해서는 포스트 번호와, 작성자 부분이 있어야 되고 댓글 내용이 있어야되서 찾아야됨
        // 포스트 아이디를 찾아야됨.
        const postId = document.querySelector('input#id').value;
        
        // 댓글 내용을 찾아야됨.
        const replyText = document.querySelector('textarea#replyText').value;
        
        // TODO:댓글 작성자 admin. 나중에 로그인한 사용자 아이디로 변경할 것.
        const writer = 'admin';
        
        // 댓글 내용이 비어 있으면 경고창을 보여주고 종료.
        if (replyText === '') {
            alert('댓글 내용을 입력하세요.');
            
            return;
        }
        
        // Ajax 요청에서 보낼 데이터를 작성.
        // js에서 중괄호를 바로쓰는 건 자바스크립트의 오브젝트 키: 값
        const data = {postId, replyText, writer};  // 자바스크립트 오브젝트 키:가 생략됨.
        
        // Ajax 요청을 보낼 URL.
        const reqUrl = `/api/reply`;
        
        // Ajax POST 방식 요청을 보냄.
        axios
            .post(reqUrl, data)
            .then((response) => {
                console.log(response);
                
                // 댓글 목록 새로고침
                getRepliesWithPostId();
                
                // 입력한 댓글 내용을 지움.
                document.querySelector('textarea#replyText').value = '';
                
            })
            .catch((error) => console.log(error));
        // .post 요청을 보내겠다.
        // .then 요청을 보내고 성공 응답이 오면 콜백 함수를 등록 하겠다.
        // .catch 실패일 때 실행할 콜백 등록.
    });
    
});