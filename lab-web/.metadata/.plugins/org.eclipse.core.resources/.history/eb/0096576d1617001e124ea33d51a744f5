package com.itwill.spring3.config;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.Customizer;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.web.SecurityFilterChain;

@EnableWebSecurity  // 웹 시큐리티 기능을 키겠다.
@Configuration  // 스프링 컨테이너에서 빈(bean)으로 생성, 관리하고 - 필요한 곳에 의존성을 주입해줌.
public class SecurityConfig {
    
    
    // Spring Security 5 버전부터 비밀번호는 반드시 암호화를 해야 함.
    // 비밀번호를 암호화 하지 않으면 HTTP 403(access denied, 접근 거부) 또는
    // HTTP 500(internal server error, 내부 서버 오류)가 발생함.
    // 암호화를 하지 않은 비밀번호는 로그인과 로그아웃을 할 수 없음.
    // 비밀번호 인코더(Password encoder) 객체를 반드시 빈(bean)으로 생성해야 함.(Spring 레거시에서는 xml파일에서 관리를 했음)
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }   // xml에서 bean설정해주는 것과 같음
    
    
    // 로그인할 때 사용할 임시 사용자(메모리에 임시 저장되는 사용자) 생성.
    @Bean
    public UserDetailsService inMemoryUserDetailsService() {
        // 유저에 대한 사용자 상세 정보를 가지고 있는 객체
        UserDetails user1 = User
                .withUsername("user1") // 로그인할 때 사용할 사용자 이름
                .password(passwordEncoder().encode("1111"))      // 로그인할 때 사용할 비밀번호
                .roles("USER")      // 사용자 권한(USER, ADMIN, ....)
                .build();   // UserDetails 객체 생성. (builder 패턴)
        
        
        UserDetails user2 = User
                .withUsername("user2") // 로그인할 때 사용할 사용자 이름
                .password(passwordEncoder().encode("2222"))      // 로그인할 때 사용할 비밀번호
                .roles("USER", "ADMIN")      // 사용자 권한(USER, ADMIN, ....)
                .build();   // UserDetails 객체 생성. (builder 패턴)
        
        
        UserDetails user3 = User
                .withUsername("user3") // 로그인할 때 사용할 사용자 이름
                .password(passwordEncoder().encode("3333"))      // 로그인할 때 사용할 비밀번호
                .roles("ADMIN")      // 사용자 권한(USER, ADMIN, ....)
                .build();   // UserDetails 객체 생성. (builder 패턴)
    
        
        return new InMemoryUserDetailsManager(user1, user2, user3);
               
    }
    
    
    // Security Filter의 설정을 해주는 bean이 있어야 함.
    // 로그인과 로그아웃에 대한 설정
    // 로그인 페이지 설정
    // 페이지 접근 권한 - 로그인을 해야만 접근 가능한 페이지, 로그인 없이 접근 가능한 페이지.
    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        // csrf.disable = 기능을 비활성화(사용하지 않겠다)하겠다.
        // CSRF(Cross Site Request Forgery) 기능을 활성화하면, 
        // Ajax POST / PUT / DELETE / 요청에서 CSRF 토큰을 서버로 전송하지 않으면 403 에러가 발생함.
        // -> CSRF 기능 비활성화.
        http.csrf((csrf) -> csrf.disable());
        
        // 로그인 페이지 설정 - 스프링에서 제공하는 기본 로그인 페이지를 사용하겠다.
        http.formLogin(Customizer.withDefaults());
        
        // 페이지 접근 권한 설정
        // 포스트 크리에이트 라고 하는 요청주소는 유저라는 권한을 가지고 있어야 한다 **는 모든 주소를 뜻함
        http.authorizeHttpRequests((authRequest) -> authRequest // 접근 권한을 설정할 수 있는 객체.
                // 권한이 필요한 페이지들을 설정 
                .requestMatchers("/post/create", "/post/details", "/post/modify",
                        "/post/update", "/post/delete", "/api/reply/**")
                .hasRole("USER") // requestMatchers에서 설정한 페이지들은 사용자(user) 권한이 있어야만 들어갈 수 있다.
                .anyRequest() // == .requestMatchers("/**") 위에 설정한 페이지를 제외하고 나머지 요청 주소들은
                .permitAll());  // 모든 사용자에게 허용하겠다(권한 없이 접근 허용)
        
        
        return http.build();
    }
    
    
    
}
