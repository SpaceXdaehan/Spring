package com.itwill.spring3.web;

import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;

import com.itwill.spring3.dto.PostCreateDto;
import com.itwill.spring3.repository.post.Post;
import com.itwill.spring3.service.PostService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Controller
@RequestMapping("/post")
public class PostController {

    private final PostService postService;
    
    @GetMapping
    public String read(Model model) {
        log.info("read()");
        
        // 포스트 목록 검색
        List<Post> list = postService.read();
        
        // 검색 결과를 Model에 세팅:
        model.addAttribute("posts", list);
        
        return "/post/read";
    }
    
    
    @GetMapping("/create")
    public void create() {
        log.info("create() GET");
        
        // 리턴 값이 없는 경우 view의 이름은 요청 주소와 같음.
    }
    
    
    @PostMapping("/create")
    public String create(PostCreateDto dto) {
        log.info("create(dto={})POST", dto);
        
        // form에서 submit(제출)된 내용을 DB 테이블에 insert
        postService.create(dto);
        
        // DB 테이블 insert 후 포스트 목록 페이지로 redirect 이동.
        return "redirect:/post";
                
    }
    
    
    // "/post/details", "/post/modify" 두가지 요청주소들을 처리하는 컨트롤러 메서드.
    @GetMapping({"/details", "/modify"})
    public void read(Long id, Model model) {
        log.info("read(id={})", id);
        
        // id로 POSTS 테이블에서 id에 해당하는 포스트를 검색.
        Post post = postService.read(id);
        
        // 결과를 model에 저장하고 => 뷰로 전달됨.
        model.addAttribute("post", post);
        
        // 컨트롤러 메서드의 리턴값이 없는 경우(void인 경우).
        // 뷰의 이름은 요청 주소와 같다!
        // details => details.html, modify => modify.html로,,,
    }
    
    @PostMapping("/delete")
    public String delete(Long id) {     
        log.info("delete = {}", id);
        
        Post result = postService.delete(id);
        log.info("delete = {}", result);
        
        return "redirect:/post/read";
    }
    
    
}
