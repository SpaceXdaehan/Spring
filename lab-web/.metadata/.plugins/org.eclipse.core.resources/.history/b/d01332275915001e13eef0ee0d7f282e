package com.itwill.spring3.service;

import java.util.ArrayList;
import java.util.List;

import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.itwill.spring3.dto.PageDto;
import com.itwill.spring3.dto.PostCreateDto;
import com.itwill.spring3.dto.PostDetailDto;
import com.itwill.spring3.dto.PostUpdateDto;
import com.itwill.spring3.repository.post.Post;
import com.itwill.spring3.repository.post.PostRepository;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@Slf4j
@RequiredArgsConstructor
@Service
public class PostService {
    // 생성자를 사용한 의존성 주입.
    private final PostRepository postRepository;
    
    
//    public List<Post> readpage(int startnum){
//        int realnum = startnum*10;
//        List<Post> list = postRepository.findByOrderByIdDesc();
//        List<Post> list2 = new ArrayList<>();
//        if(realnum+10>=list.size()) {
//            
//           for(int i = realnum; i<list.size(); i++) {                
//               list2.add(list.get(i));             
//            }          
//        } else {            
//            for(int i = realnum; i<realnum+10; i++) {               
//                list2.add(list.get(i));                
//            }            
//        }
//        return list2;
//    }
//    
//    
//    public List<PageDto> makebtn() {
//        // TODO Auto-generated method stub
//        List<Post> list = postRepository.findByOrderByIdDesc();       
//        List<PageDto> list2 = new ArrayList<>();
//        
//        for(int i = 1 ; i<=(list.size()/10)+1; i++) {            
//            list2.add(PageDto.builder().number(i).build());            
//        }       
//        return list2;
//    }
    
    
    // DB POST 테이블에서 전체 검색한 결과를 리턴:
    public List<Post> read() {
        log.info("read()");
        
        return postRepository.findByOrderByIdDesc();
    }
    
    
    // DB POSTS 테이블에 엔터티를 삽입(insert)
    public Post create(PostCreateDto dto) {
        log.info("create(dto)= {}", dto);
        
        // 아규먼트로 전달받은 DTO를 엔터티로 변환 하고
        Post entity = dto.toEntity();
        log.info("entity= {}", entity);
        
        // 만들어진 엔터티를 DB 테이블에 저장 (insert)
        postRepository.save(entity);
        log.info("entity= {}", entity);
        
        return entity;
    }
    
    
    public Post read(Long id) {
        log.info("read(id={})", id);
        
        return postRepository.findById(id).orElseThrow();    
    }
    
    
    @Transactional
    public int update(PostDetailDto dto) {
        log.info("update(dto={})", dto);
        // (1) 메서드에 @Transactional 애너테이션을 설정하고,
        // (2) DB에서 엔터티를 검색하고,
        // (3) 검색한 엔터티를 수정하면,
        
        int result = 0;
        if(postRepository.saveAndFlush(dto.toEntity())!=null) {
            
            result = 1;           
        }      
        return result;
    }


    public void delete(long id) {
        log.info("delete(id={})", id);
        
        postRepository.deleteById(id);        
    }
}
